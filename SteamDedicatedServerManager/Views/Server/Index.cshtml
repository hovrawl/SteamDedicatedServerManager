@model ServerListViewModel

@{
    ViewBag.Title = "Steam Dedicated Server Manager - Server List";
    var servers = Model.ServerInstances;
}
<div>
    <button class="h-create-server-btn">Create V Rising Server</button>
</div>

@await Html.PartialAsync("_List", Model)


<script type="text/javascript">
    function createServer() {
        // let downloadConsole = $('.h-download-console');
        let source = new EventSource('/console-sse');
        source.onopen = function (){
            console.log('Download Console Connected');
        }
        source.onerror = function (event){
            source.close();
        }
        source.onmessage = function (event){
            if (event.data){
                //downloadConsole.append(event.data);
                console.log(event.data);
            }
        }
        VRisingServerManager.DownloadConsoleEventSource = source;
                
        fetch('@Url.Action("CreateServer")', {
            method: 'POST'
        }).then((response) => {
            // Disconnect the source on finish
            if (VRisingServerManager.DownloadConsoleEventSource && VRisingServerManager.DownloadConsoleEventSource.close){
                VRisingServerManager.DownloadConsoleEventSource.close();
                console.log('Download Console Closed');
            }    
            console.log(response)
        })
    }
    
    function startServer(e) {
        let downloadConsole = $('.h-download-console');
        let target = $(e.target);
        let serverId = target.attr('data-id');
        let fetchData = {
            serverIdString: serverId
        };
        var formData = new FormData(); 
        formData.append('serverIdString', serverId);
        fetch('@Url.Action("StartServer")', {
                method: 'POST',
                body: formData,
                //body: JSON.stringify(fetchData),
                // headers: {
                //     'Content-Type': 'application/json',
                // },
        }).then((response) => {
            console.log(response)
            
            // // After server has started, we can reconnect the event server to the console
            let source = new EventSource('/console-sse');
            source.onopen = function (){
                console.log('Server Console Connected');
            }
            source.onerror = function (event){
                source.close();
            }
            source.onmessage = function (event){
                if (event.data){
                    console.log(event.data); 
                    // downloadConsole.append(event.data);
                    // let consoleElement = downloadConsole.get(0);
                    // consoleElement.scrollTop = consoleElement.scrollHeight;
                    
                }
            }  
        })
    }
    
    function serverDetails(e) {
        let target = $(e.target);
        let serverId = target.attr('data-id');
        let url = "@Url.Action("Details", "Server")";
        window.location = url + '?serverIdString=' + serverId;
    }
    
    $(document).ready(function() {
        // on start function
        let createServerBtn = $('.h-create-server-btn');
        createServerBtn.on('click', createServer);
    
        let startServerBtn = $('.h-start-server-btn');
        startServerBtn.on('click', startServer);
        
        let serverDetailsBtn = $('.h-server-details-btn');
        serverDetailsBtn.on('click', serverDetails);
        
    });
    
</script>